---
- name: Initial setup, disable SELinux, swap, and configure system for Kubernetes
  hosts: all
  become: yes
  tasks:
    - name: Ensure necessary packages are installed (Ubuntu)
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - curl
        - apt-transport-https
        - ca-certificates
        - software-properties-common
      when: ansible_facts['distribution'] == 'Ubuntu'

    - name: Ensure necessary packages are installed (Rocky)
      dnf:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - dnf-plugins-core
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Update all packages to the latest version (Ubuntu)
      apt:
        upgrade: dist
      when: ansible_facts['distribution'] == 'Ubuntu'

    - name: Update all packages to the latest version (Rocky)
      dnf:
        name: '*'
        state: latest
        update_cache: yes
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Disable UFW firewall
      command: ufw disable
      when: ansible_facts['distribution'] == 'Ubuntu'

    - name: Disable Firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Set SELinux to permissive mode
      command: setenforce 0
      when: ansible_selinux.status == "enabled"

    - name: Disable SELinux in config file
      replace:
        path: /etc/selinux/config
        regexp: '^SELINUX=.*'
        replace: 'SELINUX=disabled'

    - name: Turn off all swap devices and files
      command: swapoff -a
    - name: Turn off all swap devices and files
      command: swapoff -a

    - name: Comment out swap entry in /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*/dev/mapper/rl-swap\s+none\s+swap\s+defaults\s+0\s+0\s*$'
        line: '# /dev/mapper/rl-swap none swap defaults 0 0'
        state: present
    - name: Create containerd modules-load configuration
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter

    - name: Load kernel module overlay
      modprobe:
        name: overlay
        state: present

    - name: Load kernel module br_netfilter
      modprobe:
        name: br_netfilter
        state: present

    - name: Create sysctl configuration for Kubernetes
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Add Docker CE repository
      command: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Install containerd
      dnf:
        name: containerd.io
        state: present
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Generate default containerd configuration
      command: containerd config default
      register: containerd_config_default
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Write containerd configuration to file
      copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config_default.stdout }}"
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Enable systemd cgroup in containerd configuration
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Restart containerd service
      service:
        name: containerd
        state: restarted
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Enable containerd service
      service:
        name: containerd
        enabled: yes
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Check containerd service status
      command: systemctl status containerd
      register: containerd_status
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Display containerd service status
      debug:
        var: containerd_status.stdout

    - name: Add Kubernetes repository
      copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Update yum repositories
      command: yum update -y
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Install Kubernetes components
      yum:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: present
        disable_excludes: kubernetes
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Check kubeadm version
      command: kubeadm version
      register: kubeadm_version_output
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Display kubeadm version
      debug:
        var: kubeadm_version_output.stdout
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Start kubelet service
      service:
        name: kubelet
        state: started
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Enable kubelet service
      service:
        name: kubelet
        enabled: yes
      when: ansible_facts['distribution'] == 'Rocky'

    - name: Reboot the server
      reboot:
        msg: "Reboot initiated by Ansible to apply SELinux, swap, and system configurations"
        pre_reboot_delay: 10
        post_reboot_delay: 30
        reboot_timeout: 600

    - name: Wait for the server to come back online
      wait_for_connection:
        delay: 30
        timeout: 300

    - name: Check SELinux status
      command: sestatus
      register: sestatus_output

    - name: Display SELinux status
      debug:
        var: sestatus_output.stdout

    - name: Check if swap is disabled
      command: swapon --summary
      register: swapon_output

    - name: Display swap status
      debug:
        var: swapon_output.stdout

    - name: Verify sysctl settings
      command: sysctl net.bridge.bridge-nf-call-iptables net.ipv4.ip_forward net.bridge.bridge-nf-call-ip6tables
      register: sysctl_output

    - name: Display sysctl settings
      debug:
        var: sysctl_output.stdout
